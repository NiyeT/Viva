class Solution(object):
    def node_rows(self,bst):
        row_pairs=[]
        rows=[]
        remove=1
        for node in bst:
            row=bst[0:remove]
            print(row)
            rows.append(row)
            for n in range(remove):bst.pop(0)
            remove*=2
        rows_length=len(rows)
        for row in range(rows_length):
            if(row==rows_length-1):continue
            group=[rows[row],rows[row+1]]
            row_pairs.append(group)
        return row_pairs

    def triangle_conversion(self,node_rows):
        triangles=[]
        for row_pair in node_rows:
            row1=row_pair[0]
            row2=row_pair[1]
            for x in range(len(row1)):
                d=1;c=2
                if(x==0):d=0;c=1
                group=[row1[x],row2[x+d],row2[x+c]]
                triangles.append(group)
        return triangles

    def mini_validator(self,triangle):
        print(triangle)
        top=triangle[0]
        left=triangle[1]
        right=triangle[2]
        if(left>top):return False
        if(right<top):return False
        return True

    def isValidBST(self,root):
        # print('root:',root)
        rows=self.node_rows(root)
        # print('rows:',rows)
        triangles=self.triangle_conversion(rows)
        print('triangles:',triangles)
        for triangle in triangles:
            valid_triangle=self.mini_validator(triangle)
            print(valid_triangle)
            if(not valid_triangle):return False
        return True

bst=[2,1,3]
solve=Solution().isValidBST(bst)
